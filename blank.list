
 a vehicle management system aids businesses in effectively managing their fleets of vehicles. 
 The system can be used to monitor several facets of the lifecycle of a vehicle, such as purchasing, upkeep, fuel usage, and disposal. 
 The following are some essential characteristics of a vehicle management system:

Vehicle registration:
 The system is capable of keeping track of all the vehicles a company has, as well as their make, model, year, VIN, and other information.

The system has the ability to plan routine maintenance procedures including inspections, tire rotations, and oil changes.

Tracking of gasoline usage and costs, including fuel kind, quantity, and cost per gallon, is possible with the system.

Management of drivers:
 The system is capable of keeping track of all drivers who are permitted to operate the cars and their driver's licenses.
 Reporting of incidents and accidents: The system is capable of keeping track of any mishaps or occurrences involving the cars and producing reports.

Asset management: The system can keep track of a vehicle's depreciation and resale value to help businesses decide when to replace them.

Inventory control: The system can keep track of the supplies and parts for vehicles and notify users when stock levels are low.

Reports and analytics: The system can produce reports and analytics to assist enterprises in analyzing vehicle data and locating improvement opportunities.

A vehicle management system can help businesses optimize their fleet operations, cut costs, and boost compliance and safety.


package main

import (
	"database/sql"
	"fmt"
	"log"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type Vehicle struct {
	ID       int
	Make     string
	Model    string
	Year     int
	VIN      string
	Mileage  int
	LastServ time.Time
}

type MaintenanceTask struct {
	ID              int
	VehicleID       int
	TaskName        string
	TaskDescription string
	DueDate         time.Time
}

type Asset struct {
	ID                int
	Name              string
	Description       string
	AcquisitionDate   time.Time
	AcquisitionCost   float64
	DepreciationValue float64
	CurrentValue      float64
	Status            string
}

func main() {
	// Open a database connection
	db, err := sql.Open("mysql", "user:password@tcp(localhost:3306)/vehicle_management")
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	// Schedule maintenance for all vehicles that haven't been serviced in the last 6 months or 5000 miles
	vehicles, err := getVehiclesForMaintenance(db, time.Now(), 6*time.Month, 5000)
	if err != nil {
		log.Fatalf("Failed to get vehicles for maintenance: %v", err)
	}

	for _, vehicle := range vehicles {
		// Create a maintenance task
		task := createMaintenanceTask(vehicle, time.Now())

		// Insert the maintenance task into the database
		stmt, err := db.Prepare("INSERT INTO maintenance_tasks (vehicle_id, task_name, task_description, due_date) VALUES (?, ?, ?, ?)")
		if err != nil {
			log.Fatalf("Failed to prepare insert statement: %v", err)
		}
		_, err = stmt.Exec(task.VehicleID, task.TaskName, task.TaskDescription, task.DueDate)
		if err != nil {
			log.Fatalf("Failed to insert maintenance task into database: %v", err)
		}

		fmt.Printf("Scheduled maintenance task for vehicle %d: %s\n", vehicle.ID, task.TaskName)
	}

	// Retrieve asset information
	assets, err := getAssets(db)
	if err != nil {
		log.Fatalf("Failed to retrieve assets: %v", err)
	}

	// Calculate depreciation for all assets
	for _, asset := range assets {
		asset.DepreciationValue = calculateDepreciation(asset.AcquisitionDate, asset.AcquisitionCost, 5)
		asset.CurrentValue = asset.AcquisitionCost - asset.DepreciationValue

		// Update the asset in the database
		stmt, err := db.Prepare("UPDATE assets SET depreciation_value = ?, current_value = ? WHERE id = ?")
		if err != nil {
			log.Fatalf("Failed to prepare update statement: %v", err)
		}
		_, err = stmt.Exec(asset.DepreciationValue, asset.CurrentValue, asset.ID)
		if err != nil {
			log.Fatalf("Failed to update asset in database: %v", err)
		}

		fmt.Printf("Updated asset %d: %s\n", asset.ID, asset.Name)
	}

	// Generate asset report
	report, err := generateAssetReport(db)
	if err != nil {
		log.Fatalf("Failed to generate asset report: %v", err)
	}

	fmt.Println("Asset Report")
	fmt.Println("------------")
	fmt.Printf("Total assets: %d\n", report.TotalAssets)
	fmt.Printf("Total acquisition cost: $%.)
